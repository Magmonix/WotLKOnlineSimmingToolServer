@page "/CharacterUpdater"

@using System.Reflection
@using System.IO
@using System.Xml
@using WotLKOnlineSimmingToolServer.Data.CharacterHistory.CharacterInfo;
@using WotLKOnlineSimmingToolServer.Data;
@using System.Net.Http.Json;
@using System.Linq;
@using System.Xml.Serialization;

@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

<head>
    <script type="text/javascript" src="https://wotlkdb.com/static/widgets/power.js" suppress-error="BL9992"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" suppress-error="BL9992"></script>
</head>

<h1>View Character Sheet</h1>
<br />
<br />
<select @bind="@sName">
    <option selected>~CHOOSE A SERVER~</option>
    @foreach (var server in servers)
    {
        if (server.patch == "3.3.5" || server.patch == "3.3.5a") { <option>@server.name</option> }
    }
</select>
<input type="text" @bind="@characterName" placeholder="Character Name" />

<button @onclick="ImportFromLegacyPlayers">Import</button>
<br />
<br />
<br />

@functions{
    public string characterName { get; set; }
    public string serverName { get; set; }
}


<div class="container">
    <img src="/Assets/CharacterInventory2.png" style="text-align:center" />
    <img src="/Assets/Slot_Head.png" class="Slot_Head" />
    <a href="wotlkdb.com/?item=@head" style="background: url(@headURL) left center no-repeat; z-index: 100; " class="Slot_Head" onClick="return false;"></a>
    <img src="/Assets/Slot_Neck.png" class="Slot_Neck" />
    <a href="wotlkdb.com/?item=@neck" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Neck" onClick="return false;"></a>
    <img src="/Assets/Slot_Shoulder.png" class="Slot_Shoulder" />
    <a href="wotlkdb.com/?item=@shoulder" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Shoulder" onClick="return false;"></a>
    <img src="/Assets/Slot_Back.png" class="Slot_Back" />
    <a href="wotlkdb.com/?item=@back" style="background: url(@backURL) left center no-repeat; z-index: 100; " class="Slot_Back" onClick="return false;"></a>
    <img src="/Assets/Slot_Chest.png" class="Slot_Chest" />
    <a href="wotlkdb.com/?item=@chest" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Chest" onClick="return false;"></a>
    <img src="/Assets/Slot_Wrists.png" class="Slot_Wrists" />
    <a href="wotlkdb.com/?item=@wrists" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Wrists" onClick="return false;"></a>
    <img src="/Assets/Slot_Main_Hand.png" class="Slot_Main_Hand" />
    <a href="wotlkdb.com/?item=@mainHand" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Main_Hand" onClick="return false;"></a>
    <img src="/Assets/Slot_Off_Hand.png" class="Slot_Off_Hand" />
    <a href="wotlkdb.com/?item=@offHand" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Off_Hand" onClick="return false;"></a>
    <img src="/Assets/Slot_Ranged.png" class="Slot_Ranged" />
    <a href="wotlkdb.com/?item=@ranged" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Ranged" onClick="return false;"></a>
    <img src="/Assets/Slot_Gloves.png" class="Slot_Gloves" />
    <a href="wotlkdb.com/?item=@gloves" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Gloves" onClick="return false;"></a>
    <img src="/Assets/Slot_Belt.png" class="Slot_Belt" />
    <a href="wotlkdb.com/?item=@belt" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Belt" onClick="return false;"></a>
    <img src="/Assets/Slot_Legs.png" class="Slot_Legs" />
    <a href="wotlkdb.com/?item=@legs" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Legs" onClick="return false;"></a>
    <img src="/Assets/Slot_Boots.png" class="Slot_Boots" />
    <a href="wotlkdb.com/?item=@boots" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Boots" onClick="return false;"></a>
    <img src="/Assets/Slot_Ring1.png" class="Slot_Ring1" />
    <a href="wotlkdb.com/?item=@ring1" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Ring1" onClick="return false;"></a>
    <img src="/Assets/Slot_Ring2.png" class="Slot_Ring2" />
    <a href="wotlkdb.com/?item=@ring2" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Ring2" onClick="return false;"></a>
    <img src="/Assets/Slot_Trinket1.png" class="Slot_Trinket1" />
    <a href="wotlkdb.com/?item=@trinket1" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Trinket1" onClick="return false;"></a>
    <img src="/Assets/Slot_Trinket2.png" class="Slot_Trinket2" />
    <a href="wotlkdb.com/?item=@trinket2" style="background: url() left center no-repeat; z-index: 100; " class="Slot_Trinket2" onClick="return false;"></a>
</div>
<br />


@code{
    public string head      { get; set; }
    public string neck      { get; set; }
    public string shoulder  { get; set; }
    public string back      { get; set; }
    public string chest     { get; set; }
    public string wrists    { get; set; }
    public string mainHand  { get; set; }
    public string offHand   { get; set; }
    public string ranged    { get; set; }
    public string gloves    { get; set; }
    public string belt      { get; set; }
    public string legs      { get; set; }
    public string boots     { get; set; }
    public string ring1     { get; set; }
    public string ring2     { get; set; }
    public string trinket1  { get; set; }
    public string trinket2  { get; set; }

    public string headURL      { get; set; }
    public string neckURL      { get; set; }
    public string shoulderURL  { get; set; }
    public string backURL      { get; set; }
    public string chestURL     { get; set; }
    public string wristsURL    { get; set; }
    public string mainHandURL  { get; set; }
    public string offHandURL   { get; set; }
    public string rangedURL    { get; set; }
    public string glovesURL    { get; set; }
    public string beltURL      { get; set; }
    public string legsURL      { get; set; }
    public string bootsURL     { get; set; }
    public string ring1URL     { get; set; }
    public string ring2URL     { get; set; }
    public string trinket1URL  { get; set; }
    public string trinket2URL  { get; set; }

    private IEnumerable<Server> servers = Array.Empty<Server>();
    private CharacterViewer characterViewer;
    private CharacterHistory characterHistory;
    public CharacterGear gear = new CharacterGear();
    string sName = "~CHOOSE A SERVER~";
    Dictionary<int, string> glyphDict = new Dictionary<int, string>();
    int historyId = 0;
    string iconURL = "https://wotlkdb.com/static/images/wow/icons/medium/"; //+item+.jpg
    string itemLookupURL = "https://wotlkdb.com/?item=";
    string itemLookupEndURL = "&xml";

    private async Task Validation()
    {
        if (characterName.Any(ch => !Char.IsLetter(ch)))
        {
            await jsRuntime.InvokeVoidAsync("alert", "The character name cannot contain spaces or special characters.");
            throw new ArgumentException(message: "The character name cannot contain spaces or special characters.");
        }
        if (sName == "~CHOOSE A SERVER~")
        {
            await jsRuntime.InvokeVoidAsync("alert", "You must choose a server!");
            throw new ArgumentException(message: "You must choose a server!");
        }
    }


    private async Task GetHistoryId()
    {
        HttpClient client = new HttpClient();
        string uri = "https://legacyplayers.com/API/armory/character_viewer/" + sName + "/" + characterName; //Check user input here...
        uri = Uri.EscapeUriString(uri);
        HttpResponseMessage response = await client.GetAsync(uri);
        if (response.IsSuccessStatusCode)
        {
            characterViewer = await response.Content.ReadFromJsonAsync<CharacterViewer>();
        }
        var currentHighest = 0;

        foreach (var hist in characterViewer.history)
        {
            if (int.Parse(hist.label_key) > currentHighest)
            {
                currentHighest = int.Parse(hist.label_key);
                historyId = hist.value;
            }
        }
    }

    private async Task GetCharacterInfo()
    {
        HttpClient client = new HttpClient();
        string uri = "https://legacyplayers.com/API/armory/character_history/" + historyId;
        HttpResponseMessage response = await client.GetAsync(uri);
        if (response.IsSuccessStatusCode)
        {
            characterHistory = await response.Content.ReadFromJsonAsync<CharacterHistory>();
            string characterClass = ((CharacterClassId)characterHistory.character_info.hero_class_id).ToString();
            string characterRace = ((CharacterRaceId)characterHistory.character_info.race_id).ToString();
            gear = characterHistory.character_info.gear;
            string talents = characterHistory.character_info.talent_specialization.Replace("|", "");
        }
    }

    private async Task QueryIcons()
    {
        backURL = iconURL + "12345" + ".jpg";
    }

    private void UpdateUI()
    {
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.head.item_id)))            { head = gear.head.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.neck.item_id)))            { neck = gear.neck.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.shoulder.item_id)))        { shoulder = gear.shoulder.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.back.item_id)))            { back = gear.back.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.chest.item_id)))           { chest = gear.chest.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.wrist.item_id)))           { wrists = gear.wrist.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.main_hand.item_id)))       { mainHand = gear.main_hand.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.off_hand.item_id)))        { offHand = gear.off_hand.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.ternary_hand.item_id)))    { ranged = gear.ternary_hand.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.glove.item_id)))           { gloves = gear.glove.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.belt.item_id)))            { belt = gear.belt.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.leg.item_id)))             { legs = gear.leg.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.boot.item_id)))            { boots = gear.boot.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.ring1.item_id)))           { ring1 = gear.ring1.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.ring2.item_id)))           { ring2 = gear.ring2.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.trinket1.item_id)))        { trinket1 = gear.trinket1.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        try{if (!string.IsNullOrWhiteSpace(Convert.ToString(gear.trinket2.item_id)))        { trinket2 = gear.trinket2.item_id.ToString(); }}
        catch { Console.WriteLine("No item in found in a slot."); }
        StateHasChanged();
    }

    private async void ImportFromLegacyPlayers()
    {
        try
        {
            await Validation();
            await GetHistoryId();
            await GetCharacterInfo();
            await QueryIcons();
            UpdateUI();
        }
        catch (Exception e)
        {
            Console.WriteLine("{0} Exception caught.", e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.GetAsync("https://legacyplayers.com/API/data/server");
        if (response.IsSuccessStatusCode)
        {
            servers = await response.Content.ReadFromJsonAsync<Server[]>();
        }
    }
}


<style>

    .container {
        position: relative;
    }

    .Slot_Head {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 34px;
        top: 71px;
    }

    .Slot_Neck {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 34px;
        top: 108px;
    }

    .Slot_Shoulder {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 34px;
        top: 145px;
    }

    .Slot_Back {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 34px;
        top: 182px;
    }

    .Slot_Chest {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 34px;
        top: 219px;
    }

    .Slot_Wrists {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 34px;
        top: 329px;
    }

    .Slot_Main_Hand {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 125px;
        top: 351px;
    }

    .Slot_Off_Hand {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 162px;
        top: 351px;
    }

    .Slot_Ranged {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 200px;
        top: 351px;
    }

    .Slot_Gloves {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 71px;
    }

    .Slot_Belt {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 108px;
    }

    .Slot_Legs {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 145px;
    }

    .Slot_Boots {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 182px;
    }

    .Slot_Ring1 {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 219px;
    }

    .Slot_Ring2 {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 256px;
    }

    .Slot_Trinket1 {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 293px;
    }

    .Slot_Trinket2 {
        position: absolute;
        width: 30px;
        height: 30px;
        left: 289px;
        top: 329px;
    }
</style>